
package numericalintegration;

import com.mathworks.engine.EngineException;
import java.awt.EventQueue;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.RejectedExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import static numericalintegration.NumericalIntegration.*;


public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }
    public double []X;
    public double []Y;
    public double []Xold;
    public double []Yold;
    public String f;
    public double h;
    public int n;
    private void setf(String f)
    {
        this.f=f;
    }
    private void seth(double h)
    {
        this.h=h;
    }
    private void setX(double X[])
    {
        this.X=X;
    }
    private void setY(double Y[])
    {
        this.Y=Y;
    }
    private void setn(int n)
    {
        this.n=n;
    }
    private double[] parseArray(String[] value)
    {
        double []val= new double[value.length];  
        for(int i = 0; i < value.length; i++ )
        {
            val[i]=Double.parseDouble(value[i]);
        }
        return val;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        func = new javax.swing.JTextField();
        funcLabel = new javax.swing.JLabel();
        pointX = new javax.swing.JTextField();
        pointXLable = new javax.swing.JLabel();
        pointY = new javax.swing.JTextField();
        pointYLable = new javax.swing.JLabel();
        integrationLabel = new javax.swing.JLabel();
        Method = new javax.swing.JComboBox<String>();
        hvalue = new javax.swing.JTextField();
        hValueLabel = new javax.swing.JLabel();
        answerLable = new javax.swing.JLabel();
        ans = new javax.swing.JLabel();
        nvalue = new javax.swing.JTextField();
        nValueLabel = new javax.swing.JLabel();
        solve = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        func.setText("sin(x)");
        func.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcActionPerformed(evt);
            }
        });

        funcLabel.setText("Function ( Example: x^2 + x ) :");

        pointX.setText("0,pi/2,pi/3,pi/2,pi");
        pointX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointXActionPerformed(evt);
            }
        });

        pointXLable.setText("Known x Values ( .02,3,5,6 ) :");

        pointY.setText("-0,1,0.86602540378,0.78539816339,0");
        pointY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointYActionPerformed(evt);
            }
        });

        pointYLable.setText("Corresponding f(x) Values ( .02,3,5,6 ) :");

        integrationLabel.setText("Method of Integration");

        Method.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Multiple Application of the Trapezoidal Rule", "composite Simpson's Rule" }));
        Method.setSelectedIndex(0);
        Method.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MethodActionPerformed(evt);
            }
        });

        hvalue.setText("pi/20");
        hvalue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hvalueActionPerformed(evt);
            }
        });

        hValueLabel.setText("h value:");

        answerLable.setText("Answer:");

        nvalue.setText("4");
        nvalue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nvalueActionPerformed(evt);
            }
        });

        nValueLabel.setText("n value:");

        solve.setText("Solve");
        solve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveActionPerformed(evt);
                computations(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(funcLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(func, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Method, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(pointXLable))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(hvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(hValueLabel)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(94, 94, 94)
                                                .addComponent(nValueLabel))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(66, 66, 66)
                                                .addComponent(nvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(131, 131, 131)
                                .addComponent(pointX, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pointY, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pointYLable))))
                        .addGap(117, 117, 117))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(answerLable, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(integrationLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(ans, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(solve))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(func, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(funcLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pointXLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pointX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(pointYLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pointY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(integrationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Method, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(answerLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ans, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solve)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void funcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_funcActionPerformed

    private void pointXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointXActionPerformed

    private void pointYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointYActionPerformed
Double pi = Math.PI;
    private void solveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveActionPerformed
        startt1();
        setf(func.getText());
        
        
        String[] sX=(pointX.getText().split(","));
        String[] sY = (pointY.getText().split(","));
        for(int i = 0; i < sX.length; i++)
        {
            Double pi = Math.PI;
            if(sX[i].contains("pi"))
            {
                sX[i] = sX[i].replace("pi", pi.toString());
            }
            if(sX[i].contains("/"))
            {
                
                String[] s = (sX[i].split("/"));
                
                Double b= Double.parseDouble(s[0])/Double.parseDouble(s[1]);
                sX[i]= b.toString();
            }
            if(sY[i].contains("pi"))
            {
                sY[i] = sY[i].replace("pi", pi.toString());
            }
            if(sY[i].contains("/"))
            {
                
                String[] s = (sY[i].split("/"));
                
                Double b= Double.parseDouble(s[0])/Double.parseDouble(s[1]);
                sY[i]= b.toString();
            }
        }
        setX(strtodouble(sX));
        setY(strtodouble(sY));
        Xold = X;
        Yold = Y;
        
        if("".equals(nvalue.getText()))
        {
            n=X.length;
        }
        if(!"".equals(hvalue.getText()))
        {
            Arrays.sort(X);
            
            String H =  hvalue.getText();
            if(H.contains("pi"))
            {
                H = H.replace("pi", pi.toString());
            }
            if(H.contains("/"))
            {
                
                double[] b = strtodouble(H.split("/"));
                H=Double.toString(b[0]/b[1]);
            }
            seth(Double.parseDouble(H));
            
            List<Double> add;
            add = new ArrayList<Double>();
            
            for(int i = 0; i < X.length; i++)
            {
                add.add(X[i]);
            }
            for(int i = 0; i < X.length-1; i++)
            {
                if((X[i+1]-X[i])>h)
                {
                    for(int j = 1; j < (X[i+1]-X[i]); j++)
                    {
                        add.add(X[i]+j*h);
                    }
                }
            }
            if(n!=(add.size()))
            {
                setn(add.size());
            }
            X = new double[n];
            Y = new double[n];
            
            
            int l=0;
            for(int i = 0; i < n; i++)
            {
                X[i]=add.get(i);
            }
            Arrays.sort(X);
            for(int i = 0; i < n; i++)
            {
                if(Xold[l]==X[i])
                {
                    Y[i]=Yold[l];
                    l++;
                }
                else
                {
                    Y[i]=Double.NaN; 
                }
            }
            
        }
    }//GEN-LAST:event_solveActionPerformed

    private void MethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MethodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MethodActionPerformed

    private void hvalueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hvalueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hvalueActionPerformed

    private void nvalueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nvalueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nvalueActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            close();
        } catch (EngineException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    private void computations(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computations
        
    Thread t = new Thread(new Runnable() {  
    public void run() {
        
        for(int i = 0; i < Y.length; i++)
            {
              if(Double.isNaN(Y[i]))
              {
                    compute(i);   
              }
            }
        int choice = Method.getSelectedIndex();
        String value;
        if(choice == 0)
        {
            value = TrapezoidalRule();
        }
        else
        {
            System.out.println("Simpson's");
            value=Simpson();
        }
        endThread();
        printAnswer(value);
       
    }
    
    });
    
    t.start();
    
    }//GEN-LAST:event_computations

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() 
            {
                
            }
        });
    }
public void printAnswer(String s)
{
    ans.setText(s);
    Method.updateUI();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Method;
    private javax.swing.JLabel ans;
    private javax.swing.JLabel answerLable;
    private javax.swing.JTextField func;
    private javax.swing.JLabel funcLabel;
    private javax.swing.JLabel hValueLabel;
    private javax.swing.JTextField hvalue;
    private javax.swing.JLabel integrationLabel;
    private javax.swing.JLabel nValueLabel;
    private javax.swing.JTextField nvalue;
    private javax.swing.JTextField pointX;
    private javax.swing.JLabel pointXLable;
    private javax.swing.JTextField pointY;
    private javax.swing.JLabel pointYLable;
    private javax.swing.JButton solve;
    // End of variables declaration//GEN-END:variables
}
